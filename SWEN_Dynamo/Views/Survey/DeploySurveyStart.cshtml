@model SWEN_Dynamo.Models.DeploySurveyStart


@{
    ViewBag.Title = "DeploySurveyStart";
}

<h2>DeploySurveyStart</h2>

<head>
    <link href="~/Content/progressbar.css" rel="stylesheet" type="text/css" />
</head>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>DeploySurveyStart</h4>

      <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.SurveyID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="text-left">
                    @Html.DisplayTextFor(model => model.SurveyID)
                    @Html.ValidationMessageFor(model => model.SurveyID, "", new { @class = "text-danger" })
                </div>
                </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken0, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken0, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken0, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken3, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken3, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken4, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken4, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken4, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken5, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken5, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken5, "", new { @class = "text-danger" })
            </div>
        </div>


       <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken6, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken6, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken6, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken7, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken7, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken7, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken8, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken8, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken8, "", new { @class = "text-danger" })
            </div>
        </div>
      
        <div class="form-group">
            @Html.LabelFor(model => model.ResponseToken9, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResponseToken9, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ResponseToken9, "", new { @class = "text-danger" })
            </div>
        </div>
        


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Deploy" class="btn btn-default" onclick="move()"  />
            </div>
        </div>

        <div id="myProgress">
            <div id="myBar"></div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Survey", "Index")
</div>
@section Scripts {
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script type="text/javascript">
    $("#myProgress").hide();
    function move() {
        $("#myProgress").show();
    var elem = document.getElementById("myBar");
    var width = 10;
    var id = setInterval(frame, 10);
    function frame() {
        if (width >= 100) {
            clearInterval(id);
        } else {
            width++;
            elem.style.width = width + '%';
            elem.innerHTML = width * 1 + '%';
        }
    }
}</script>}